# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4Mf_D8MUfM9fK1EbShNrLVSy_cfv830
"""

from google.colab import drive
drive.mount('/content/drive')

import zipfile
from PIL import Image
import io
import pandas as pd

# Path to your zip file
zip_file_path = '/content/drive/MyDrive/FaceExpressions.zip'

# Open the zip file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    # List all files in the zip
    file_list = zip_ref.namelist()


# Get the current directory
current_directory = os.getcwd()

# Open the zip file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    # Extract all the contents into the current directory
    zip_ref.extractall(current_directory)

print("Unzipping complete. Files extracted to:", current_directory)

import os
import cv2
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split

# Set the data directory
data_dir = '/content/dataset'

# Define image size and classes
IMG_SIZE = 64
CLASSES = ['Angry', 'Ahegao',  'Happy', 'Sad', 'Surprise', 'Neutral']

def load_data(data_dir):
    images = []
    labels = []
    for class_idx, class_name in enumerate(CLASSES):
        class_dir = os.path.join(data_dir, class_name)
        for img_name in os.listdir(class_dir):
            img_path = os.path.join(class_dir, img_name)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
            images.append(img)
            labels.append(class_idx)
    return np.array(images), np.array(labels)

# Load and preprocess the data
images, labels = load_data(data_dir)
images = images / 255.0  # Normalize pixel values
labels = tf.keras.utils.to_categorical(labels, num_classes=len(CLASSES))

# Split the data into training and validation sets
train_images, val_images, train_labels, val_labels = train_test_split(images, labels, test_size=0.2, random_state=42)

from tensorflow.keras import layers, models, callbacks
from sklearn.metrics import roc_auc_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import seaborn as sns

def create_cnn_model(input_shape):
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(128, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dense(len(CLASSES), activation='softmax')
    ])
    model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy', tf.keras.metrics.AUC()])
    return model

# Create and train the model
input_shape = (IMG_SIZE, IMG_SIZE, 3)
model = create_cnn_model(input_shape)

# Use early stopping to avoid overfitting
early_stopping = callbacks.EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

history = model.fit(train_images, train_labels, epochs=10, validation_data=(val_images, val_labels), callbacks=[early_stopping])

# Save the trained model
model.save('cnn_model.h5')

# Evaluate the model on the validation set
val_predictions = model.predict(val_images)
val_labels_argmax = np.argmax(val_labels, axis=1)
val_predictions_argmax = np.argmax(val_predictions, axis=1)

# Calculate the AUC
auc = roc_auc_score(val_labels, val_predictions, multi_class='ovo')
print(f"AUC: {auc}")

# Confusion Matrix
cm = confusion_matrix(val_labels_argmax, val_predictions_argmax, labels=range(len(CLASSES)))
cmd = ConfusionMatrixDisplay(cm, display_labels=CLASSES)
cmd.plot(cmap=plt.cm.Blues)
plt.show()

# Plot training & validation accuracy values
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')

# Plot training & validation loss values
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

